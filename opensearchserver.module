<?php

/**
 * Uncomment to display errors during development
 */
// error_reporting(E_ALL ^ E_NOTICE);
// ini_set('display_errors', 'On');
// if( !ini_get('safe_mode')) {
//   set_time_limit(-1);
// }

require_once 'oss_api.class.php';
require_once 'oss_misc.lib.php';
require_once 'oss_indexdocument.class.php';
require_once 'oss_results.class.php';
require_once 'oss_paging.class.php';
require_once 'oss_search.class.php';
require_once 'oss_searchtemplate.class.php';
require_once 'oss_delete.class.php';

/**
 * Implements hook_perm().
 */
function opensearchserver_perm() {
  return array('access opensearchserver', 'access opensearchserver search');
}

/**
 * Implements hook_menu().
 */
function opensearchserver_menu() {
  $items = array();
  $items['admin/settings/opensearchserver'] = array(
    'title'  => 'OpenSearchServer',
    'description'  => 'Settings to access the OpenSearchServer instance from drupal.',
    'page callback'  => 'drupal_get_form',
    'page arguments'  => array('opensearchserver_admin_index_form'),
    'access callback'  => 'user_access',
    'access arguments'  =>  array('access opensearchserver'),
  );
  $items['opensearchserver'] = array(
    'title'   => 'OpenSearchServer',
    'description'  => 'This module will integrate OpenSearchServer 1.2 as search engine for Drupal 6.x',
    'page callback'  => 'opensearchserver_view',
    'access arguments'  => array('access opensearchserver search'),
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function opensearchserver_theme($existing, $type, $theme, $path) {
  return array(
    'opensearchserver_view' => array(
      'arguments' => array('opensearchserver_data' => NULL),
      'template' => 'opensearchserver',
    )
  );
}

function opensearchserver_preprocess_search_theme_form(&$vars, $hook)  {
  $vars['form']['search_theme_form']['#value'] = t('Search this Site');
}

/**
 * Implements hook_form_alter().
 */
function opensearchserver_form_alter(&$form, $form_state, $form_id) {
  $form_id_processed = $form_id;
  $value = isset($arg[2]) ? $arg[2] : '';

  switch ($form_id_processed) {

    case 'search_form':
      $form['basic']['inline']['keys'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#default_value'  => $value,
        '#maxlength' => 255,
      );

      $form['basic']['inline']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
      );
      $form['#validate'][] = 'opensearchserver_validate';
      $form['#submit'][] = 'opensearchserver_submit';
      $form['#token'] = FALSE;
      break;

    case 'search_theme_form':
      $form['search_theme_form'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#size' => 15,
        '#maxlength' => 255,
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
      );
      $form['#submit'][] = 'opensearchserver_submit';
      $form['#token'] = FALSE;
      break;

    case 'search_block_form':
      $form['search_block_form'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#size' => 15,
        '#maxlength' => 255,
      );
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Search'),
      );
      $form['#submit'][] = 'opensearchserver_submit';
      $form['#token'] = FALSE;
      break;
  }
}

/**
 * Implements form validation.
 */

function opensearchserver_validate($form, &$form_state) {
  if (empty($form_state['values']['keys'])) {
    form_set_error('keywords', t('Please enter An Search Term.'));
  }
}

/**
 * Implements form submission.
 */

function opensearchserver_submit($form, &$form_state) {

  if ($form_state['values']['search_theme_form']) {
    $form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['search_theme_form'];
  }
  elseif ($form_state['values']['search_block_form']) {
    $form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['search_block_form'];
  }
  else {
    $form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['keys'];
  }
}

/**
 * Implements form for admin menu.
 */

function opensearchserver_admin_index_form() {
 $query = <<<SQL
   SELECT serverurl,
  `indexname`,
  `username`,
  `key`,
  `last_indexed`,
  `delay`,
  `filter_enabled`,
  `signature`,
  `title_snippet`,
  `content_snippet`,
  `url_snippet`,
  `date`,
  `date_filter`,
  `log_enable`,
  `noresult_filter_enable`,
  `block_text`
  FROM {opensearchserver}
SQL;
  $details = db_query($query);
  $nodetype = db_query(db_rewrite_sql("
  SELECT DISTINCT
  type,
  name,
  enabled
  FROM {opensearchserver_type}"));
  $result = db_query(db_rewrite_sql("SELECT name,type FROM {node_type}"));
  $form['details'] = array(
    '#type'  => 'fieldset',
    '#title'  => t('Settings'),
    '#collapsible'  => FALSE,
    '#collapsed'  => FALSE);

  $sdetails = db_fetch_object($details);
  $form['details']['serverurl'] = array(
    '#type'  => 'textfield',
    '#title'  => t('OpenSearchServer Location'),
    '#description'  => t('No trailing slash at end eg:http://example.com:8080 '),
    '#default_value'  => check_url($sdetails->serverurl),
  );

  $form['details']['indexname'] = array(
    '#type'  => 'textfield',
    '#title'  => t('OpenSearchServer Index Name '),
    '#description'  => t('Name of the OpenSearchServer Index '),
    '#default_value'  => check_plain($sdetails->indexname),
  );

  $form['details']['username'] = array(
    '#type'  => 'textfield',
    '#title'  => t('OpenSearchServer User Name'),
    '#description'  => t('OpenSearchServer user name is used for authentication '),
    '#default_value'  => check_plain($sdetails->username),
  );

  $form['details']['key'] = array(
    '#type'  => 'textfield',
    '#title'  => t('OpenSearchServer Key'),
    '#description'  => t('Used for authentication, this key is provided when a new user is  created  in the OpenSearchServer instance.'),
    '#default_value'  => check_plain($sdetails->key),
  );

  $form['fields'] = array(
    '#type'  => 'fieldset',
    '#title'  => t(' Fields to be indexed'),
    '#description'  => t('Checking boxes will include the content types in the index'),
    '#collapsible'  => TRUE,
    '#collapsed'  => FALSE,
  );

  $form['categories'] = array(
    '#type'  => 'fieldset',
    '#title'  => t('Categories to be indexed'),
    '#description'  =>  t('Check boxes for the categories you wish to index'),
    '#collapsible'  => TRUE,
    '#collapsed'  => FALSE,
  );

  $count = db_result(db_query(db_rewrite_sql("SELECT COUNT(*) FROM {opensearchserver_type}")));
  if ($count>0) {

    while ($types = db_fetch_object($nodetype)) {
      $form['fields'][$types->type] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($types->name),
        '#default_value' => check_plain($types->enabled),
      );
    }
  }
  else {
    while ($results = db_fetch_object($result)) {

      $form['fields'][$results->type] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($results->name)
      );

    }
  }
  $form['fields']['delay'] = array(
    '#type' => 'select',
    '#title' => 'Select the Indexing interval (in minutes)',
    '#options' => array(15 => t('15'), 30 => t('30'),  60 => t('60')),
    '#default_value' => check_plain($sdetails->delay),
  );

  $form['fields']['signature'] = array(
      '#type' => 'checkbox',
      '#description' => t('Checking this box will include author name in the search result.'),
      '#title' => t('Signature'),
      '#default_value' => check_plain($sdetails->signature),
  );

  $form['fields']['filters'] = array(
    '#type' => 'checkbox',
    '#description' => t('Checking this box will allow to filter the search results based on Types, Categories and Dates.'),
    '#title' => t('Enable Faceting'),
    '#default_value' => check_plain($sdetails->filter_enabled),
  );
  $form['fields']['noresult_filter_enable'] = array(
    '#type' => 'checkbox',
    '#description' => t('Checking this box will display filters when the search result was zero.'),
    '#title' => t('Enable filters at zero result'),
    '#default_value' => check_plain($sdetails->noresult_filter_enable),
  );
  $categories_data = db_query(db_rewrite_sql("SELECT name FROM {vocabulary}"));
  $category_count = db_result(db_query(db_rewrite_sql("SELECT COUNT(*) FROM {opensearchserver_categories}")));
  $category_type = db_query(db_rewrite_sql("SELECT DISTINCT id,categories,enabled FROM {opensearchserver_categories}"));

  if ($category_count>0) {
    while ($cate = db_fetch_object($category_type)) {
      $form['categories'][str_replace(' ', '_', $cate->categories)] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($cate->categories),
        '#default_value' => check_plain($cate->enabled),
      );
    }
  }
  else {
    while ($category = db_fetch_object($categories_data)) {
      $form['categories'][str_replace(' ', '_', $category->name)] = array(
        '#type' => 'checkbox',
        '#title' => check_plain($category->name),
      );
    }
  }

  $form['snippet'] = array(
    '#type' => 'fieldset',
    '#title' => t('Maximum Snippets Size'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['snippet']['title_snippet'] = array(
    '#type' => 'textfield',
    '#title' => t('Title Snippet Length '),
    '#description' => t('Title Snippet maximum number of characters'),
    '#default_value' => check_plain($sdetails->title_snippet),
  );

  $form['snippet']['content_snippet'] = array(
    '#type' => 'textfield',
    '#title' => t('Content Snippet Length '),
    '#description' => t('Content Snippet maximum number of characters'),
    '#default_value' => $sdetails->content_snippet,
  );

  $form['snippet']['url_snippet'] = array(
    '#type' => 'textfield',
    '#title' => t('URL Snippet Length '),
    '#description' => t('URL Snippet maximum number of characters'),
    '#default_value' => check_plain($sdetails->url_snippet),
  );

  $form['date'] = array(
    '#type' => 'fieldset',
    '#title' => t('Date'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );

  $form['log'] = array(
    '#type' => 'fieldset',
    '#title' => t('Search Logs'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['block'] = array(
    '#type' => 'fieldset',
    '#title' => t('Block tool-tip text'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['date']['timestamp'] = array(
    '#type' => 'select',
    '#title' => 'Select the Date to include in index',
    '#options' => array(createddate => t('Creation Date'), changeddate => t('Modification Date')),
    '#default_value' => check_plain($sdetails->date),
  );

  $form['date']['date_filters'] = array(
    '#type' => 'checkbox',
    '#description' => t('Checking this box will enable Date filtering'),
    '#title' => t('Enable Date Filter'),
    '#default_value' => check_plain($sdetails->date_filter),
  );

  $form['log']['log_enable'] = array(
    '#type' => 'checkbox',
    '#description' => t('Checking this box will log all Search queries with visitors id for further analysis.<br/> Search logs will be saved in a daily file called "report_[indexname].[currentDate]" <br/>and will be stored in log folder of the index directory.'),
    '#title' => t('Enable Log for searching.'),
    '#default_value' => check_plain($sdetails->log_enable),
  );
  $form['block']['block_tip'] = array(
    '#type' => 'textfield',
    '#description' => t('Enter the tool tip text to be blocked.'),
    '#title' => t('Enter the tool tip text.'),
    '#default_value' => check_plain($sdetails->block_text),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create-index / Save'),
    '#name' => 'save',
    );
  $form['StartIndexing'] = array(
   '#type' => 'submit',
   '#value' => t('Re-index site'),
   '#name' => 'index',
    );
  return $form;
}


/**
 * Implements form for admin form validation.
 */

function opensearchserver_admin_index_form_validate($form_id, &$form_state) {
  if ($form_state['clicked_button']['#name']=='save') {
    if (empty($form_state['values']['indexname'])) {
      form_set_error('keywords', t('Please enter the Index Name.'));
    }
    if (empty($form_state['values']['serverurl'])) {
      form_set_error('keywords', t('Please enter the Serverurl'));
    }
  }
}

/**
 * Implements the index creation on OpenSearchServer.
 */

function opensearchserver_create_index($url, $indexname, $username, $key) {
  $ossAPI = new OssApi($url);
  $ossAPI->credential($username, $key);
  $ossAPI->createIndex($indexname);
  return TRUE;
}

/**
 * Implements the field creation on schema of OpenSearchServer.
 */

function opensearchserver_setfields($url,  $indexname,  $username,  $key) {
  $query = <<<SQL
     SELECT serverurl,
      `indexname`,
      `username`,
      `key`,
      `last_indexed`,
      `delay`,
      `filter_enabled`,
      `signature`,
      `title_snippet`,
      `content_snippet`,
      `url_snippet`,
      `date`,
      `date_filter`,
      `log_enable`,
      `noresult_filter_enable`,
      `block_text`
    FROM {opensearchserver}
SQL;
  $snippet = db_query(db_rewrite_sql($query));
  $snippet_value = db_fetch_object($snippet);
  $ossAPI = new OssApi($url,  $indexname);
  $ossAPI->credential($username, $key);
  $ossAPI->setField('id', '', 'NO', 'YES', 'YES', '', 'NO', 'YES');
  $ossAPI->setField('type', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $ossAPI->setField('taxonomy', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $ossAPI->setField('content_timestamp', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $ossAPI->setField('url', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $ossAPI->setField('title', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'NO', 'NO');
  $ossAPI->setField('content', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'YES', 'NO');
  $ossAPI->setField('timestamp', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $ossAPI->setField('comments_subject', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'NO', 'NO');
  $ossAPI->setField('comments_comment', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'NO', 'NO');
  $ossAPI->setField('user_name', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'NO', 'NO');
  $ossAPI->setField('user_email', 'TextAnalyzer', 'compress', 'YES', 'positions_offsets', '', 'NO', 'NO');
  $ossAPI->setField('user_url', '', 'NO', 'YES', 'YES', '', 'NO', 'NO');
  $searchTemplate=new OssSearchTemplate($url, $indexname);
  $searchTemplate->credential($username, $key);
  $searchTemplate->createSearchTemplate("search", '
    title:($$)^10 OR title:("$$")^10 OR
    content:($$)^10 OR content:("$$")^10 OR
    user_name:($$)^10 OR user_name:("$$")^10 OR
    user_email:($$)^10 OR user_email:("$$")^10 OR
    comments_subject:($$)^10 OR comments_subject:("$$")^10 OR
    comments_comment:($$)^10 OR comments_comment:("$$")^10',
    "AND", "10", "2", "ENGLISH");
  $searchTemplate->setSnippetField("search", "title", $snippet_value->title_snippet, "b", "1", "NoFragmenter");
  $searchTemplate->setSnippetField("search", "content", $snippet_value->content_snippet, "b", "1", "SentenceFragmenter");
  $searchTemplate->setReturnField("search", "url");
  $searchTemplate->setReturnField("search", "user_url");
  $searchTemplate->setReturnField("search", "type");
  $searchTemplate->setReturnField("search", "taxonomy");
  $searchTemplate->setReturnField("search", "content_timestamp");
  $searchTemplate->setSnippetField("search", "comments_comment", "200", "b", "1", "SentenceFragmenter");
  $searchTemplate->setSnippetField("search", "comments_subject", "150", "b", "1", "NoFragmenter");
  $searchTemplate->setSnippetField("search", "user_name", "70", "b", "1", "NoFragmenter");
  $searchTemplate->setSnippetField("search", "user_email", "70", "b", "1", "NoFragmenter");
}

/**
 * Inserts the data from admin to database.
 */

function opensearchserver_populate_db($form_state, $serverurl, $indexname, $username,  $key) {

  db_query("
    TRUNCATE TABLE {opensearchserver}"
    );
  db_query("
    TRUNCATE TABLE {opensearchserver_type}"
    );
  db_query("
    TRUNCATE TABLE {opensearchserver_categories}"
    );
db_query("
    INSERT INTO `{opensearchserver}`
    (
      `serverurl`,
      `indexname`,
      `username`,
      `key`,
      `last_indexed`,
      `delay`,
      `filter_enabled`,
      `signature`,
      `title_snippet`,
      `content_snippet`,
      `url_snippet`,
      `date`,
      `date_filter`,
      `log_enable`,
      `noresult_filter_enable`,
      `block_text`
    )
    VALUES
      ('%s',  '%s',  '%s',  '%s',  '%s',  '%s',  '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s','%s', '%s')",
    check_url($form_state['values']['serverurl']),
    check_plain($form_state['values']['indexname']),
    check_plain($form_state['values']['username']),
    check_plain($form_state['values']['key']), '',
    check_plain($form_state['values']['delay']),
    check_plain($form_state['values']['filters']),
    check_plain($form_state['values']['signature']),
    check_plain($form_state['values']['title_snippet']),
    check_plain($form_state['values']['content_snippet']),
    check_plain($form_state['values']['url_snippet']),
    check_plain($form_state['values']['timestamp']),
    check_plain($form_state['values']['date_filters']),
    check_plain($form_state['values']['log_enable']),
    check_plain($form_state['values']['noresult_filter_enable']),
     check_plain($form_state['values']['block_tip'])
);

  $types = db_query(db_rewrite_sql("
      SELECT DISTINCT type,name FROM {node_type}"
  ));

  while ($type = db_fetch_object($types)) {
    db_query("
    INSERT INTO `{opensearchserver_type}`
    (
    `type`, `name`, `enabled`
    )
    VALUES
    (
    '%s', '%s', '%s'
    )",
    check_plain($type->type), check_plain($type->name), check_plain($form_state['values'][$type->type])

    );
  }
  $categories = db_query(db_rewrite_sql("
    SELECT DISTINCT vid, name FROM {vocabulary}"
  ));
  while ($category = db_fetch_object($categories)) {
    db_query("
    INSERT INTO `{opensearchserver_categories}`
    (
    `id`, `categories`,  `enabled`
    )
    VALUES
    (
    '%s', '%s',  '%s')",
    check_plain($category->vid), check_plain($category->name),
    check_plain($form_state['values'][str_replace(' ',  '_',  $category->name)])
  );
  }
  opensearchserver_setfields($serverurl, $indexname, $username,  $key);
  drupal_set_message(t('The Preferences has been Updated'));
}

/**
 * Implements the admin form submission.
 */

function opensearchserver_admin_index_form_submit($form_id, &$form_state) {

  switch ($form_state['clicked_button']['#name']) {

    case 'save':
      $indexname = $form_state['values']['indexname'];
      $serverurl = $form_state['values']['serverurl'];
      $username = $form_state['values']['username'];
      $key = $form_state['values']['key'];
      $ossAPI = new OssApi($serverurl);
      $ossAPI->credential($username, $key);
      if (!$ossAPI->isIndexAvailable($indexname)) {
        opensearchserver_create_index($serverurl, $indexname, $username, $key);
      }
      opensearchserver_populate_db(&$form_state, $serverurl, $indexname, $username, $key);
      break;
    case 'index':
      $batch = array(
        'title' => t('Indexing the document'),
        'operations' => array(array('opensearchserver_get_content__to_index', array(''))),
      );
      batch_set($batch);
      batch_process('admin/settings/opensearchserver');
      break;
  }
}

/**
 * Implements the hook cron.
 */

function opensearchserver_cron() {
  $query = <<<SQL
     SELECT serverurl,
    `indexname`,
    `username`,
    `key`,
    `last_indexed`,
    `delay`,
    `filter_enabled`,
    `signature`,
    `title_snippet`,
    `content_snippet`,
    `url_snippet`,
    `date`,
    `date_filter`,
    `log_enable`,
    `noresult_filter_enable`,
    `block_text`
    FROM {opensearchserver}
SQL;
  $getDetails = db_query($query);
  $serverDetails = db_fetch_object($getDetails);
  $from_time =strtotime(date( 'Y-m-d H:i:s', strtotime($serverDetails->last_indexed)));
  $to_time=strtotime(date('Y-m-d H:i:s', time()));
  $delay=round(abs($to_time - $from_time) / 60);
  $today=check_plain(date('YmdHis', time()));
  if ($delay > $serverDetails->delay) {
    db_query("
    UPDATE `{opensearchserver}`
    SET
    `last_indexed` = " . $today . "
    WHERE
    `serverurl` = " . "'". $serverDetails->serverurl . "'"
  );
    opensearchserver_get_content__to_index();
  }
  if (!$serverDetails->last_indexed) {
    db_query("
    UPDATE `{opensearchserver}`
    SET
    `last_indexed` = " . $today . "
    WHERE
    `serverurl` = " . "'" . $serverDetails->serverurl . "'"
  );
    opensearchserver_get_content__to_index();
  }
}

/**
 * Gets the data to be indexed.
 */

function opensearchserver_get_content__to_index() {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language_content']->language;
  }
  global $base_url, $url, $user_url;
  global $base_root, $language;
  $path=parse_url($base_root . request_uri());
  $query = <<<SQL
     SELECT serverurl,
    `indexname`,
    `username`,
    `key`,
    `last_indexed`,
    `delay`,
    `filter_enabled`,
    `signature`,
    `title_snippet`,
    `content_snippet`,
    `url_snippet`,
    `date`,
    `date_filter`,
    `log_enable`,
    `noresult_filter_enable`,
    `block_text`
    FROM {opensearchserver}
SQL;
  $getDetails = db_query($query);
  $serverDetails = db_fetch_object($getDetails);
  $ossEnginePath  = config_request_value('ossEnginePath', $serverDetails->serverurl, 'engineURL');
  $ossEngineConnectTimeOut = config_request_value('ossEngineConnectTimeOut', 5, 'engineConnectTimeOut');
  $ossEngineIndex = config_request_value('ossEngineIndex', $serverDetails->indexname, 'engineIndex');
  $deleteAPI = new OssDelete($serverDetails->serverurl, $serverDetails->indexname);
  $deleteAPI->credential($serverDetails->username, $serverDetails->key);
  $deleteAPI->delete('*:*');
  if (variable_get('clean_url', '0')) {
    $url=$base_url . '/node/';
    $user_url=$base_url . '/user/';
  }
  else {
    $url=$base_url . '/?q=node/';
    $user_url=$base_url . '/?q=user/';
  }
  $types = db_query(db_rewrite_sql("
    SELECT DISTINCT type,enabled FROM {opensearchserver_type}"
    ));
  while ($type = db_fetch_object($types)) {

    if ($type->enabled == 1) {
      $categories_check = db_query(db_rewrite_sql("
    SELECT DISTINCT categories,enabled FROM {opensearchserver_categories}"
    ));
      while ($cate_check = db_fetch_object($categories_check)) {
        if ($cate_check->enabled==1) {
          $count_result=db_query(db_rewrite_sql("
    SELECT COUNT(*) FROM {node} n, {node_revisions} rev
    WHERE
    n.nid = rev.nid AND n.type LIKE" . '"' . $type->type . '"'
    ));
          $result_count = db_result($count_result);
          for ($i = 0; $i < $result_count; $i++) {
            if ($i != 0) {
              $i = $j + 1;
            }
            $j = $i + 100;
            if ($serverDetails->date="createddate") {
     $sql = '
       SELECT
       node.type,
       node.nid,
       node.comment,
       node.status,
       node.created,
       node_revisions.uid,
       node_revisions.title,
       node_revisions.body,
       node_revisions.timestamp ' .'
       FROM {node}, {node_revisions}
       WHERE
       node.nid = node_revisions.nid
       AND
       node.type LIKE' . "'" . $type->type . "'" . 'LIMIT ' . $i . ',' . $j;

  }
    else {
              $sql = '
    SELECT
    node.type,
    node.nid,
    node.comment,
    node.status,
    node.changed,
    node_revisions.uid,
    node_revisions.title,
    node_revisions.body,
    node_revisions.timestamp ' . '
    FROM {node}, {node_revisions}
    WHERE
    node.nid = node_revisions.nid
    AND
    node.type LIKE' . "'" . $type->type . "'" . 'LIMIT ' . $i . ',' . $j;
}
$result = db_query(db_rewrite_sql($sql));
            $index = new OssIndexDocument();
            while ($resultdoc = db_fetch_object($result)) {
              if ($resultdoc->status == 1) {

                $taxonomy = db_query('
                SELECT * FROM {term_node}
                WHERE
                term_node.nid IN (' . db_placeholders($resultdoc->nid, 'int') . ')', $resultdoc->nid
                );

                $taxonomyarray = db_fetch_object($taxonomy);
                $taxonomy_data = db_query('
                SELECT * FROM {term_data}
                WHERE
                term_data.tidIN (' . db_placeholders($taxonomyarray->tid, 'int') . ')', $taxonomyarray->tid
              );
                $taxonomyarray_data = db_fetch_object($taxonomy_data);
                $getusers = db_query('
                  SELECT name, mail, uid FROM {users}
                  WHERE
                  uid IN (' . db_placeholders($resultdoc->uid, 'int') . ')', $resultdoc->uid
              );
                $userdetails = db_fetch_object($getusers);
                $document = $index->newDocument($language->language);
                $document->newField('id', $resultdoc->type . '_' . $resultdoc->nid);
                if ($resultdoc->created) {
                  $document->newField('content_timestamp', date('YmdHis', $resultdoc->created));
                }
                else {
                  $document->newField('content_timestamp', date('YmdHis', $resultdoc->changed));
                }
                $document->newField('type')->newValue(html_entity_decode($resultdoc->type, ENT_QUOTES, 'UTF-8'), TRUE);
                $document->newField('taxonomy')->newValue(html_entity_decode($taxonomyarray_data->name, ENT_QUOTES, 'UTF-8'), TRUE);
                $document->newField('title')->newValue(html_entity_decode($resultdoc->title, ENT_QUOTES, 'UTF-8'), TRUE);
                $document->newField('content')->newValue(html_entity_decode($resultdoc->body, ENT_QUOTES, 'UTF-8'), TRUE);
                $urlalise = db_query(db_rewrite_sql('
                  SELECT * FROM {url_alias}
                WHERE
                url_alias.src=' . "'" . 'node/' . $resultdoc->nid . "'"
                ));
                $urlalise_object = db_fetch_object($urlalise);
                if ($urlalise_object) {
                  $url_alise= $urlalise_object->dst;
                  $document->newField('url', $base_url . '/' . $url_alise);
                }
                else {
                  $document->newField('url', $url . $resultdoc->nid);
                  $document->newField('url_snippet', strip_tags($url . $resultdoc->nid));
                }
                $document->newField('timestamp', $resultdoc->timestamp);
                $document->newField('user_name', $userdetails->name);
                $document->newField('user_email', $userdetails->mail);
                $document->newField('user_url', $user_url . $userdetails->uid);
                if ($resultdoc->comment > 0) {
               $comments = db_query(db_rewrite_sql("
                SELECT
                cid,nid,subject,timestamp,comment
                FROM {comments}
                WHERE
                comments.nid = " . $resultdoc->nid
            ));
                  while ($commentdoc = db_fetch_object($comments)) {
                    $document = $index->newDocument($language->language);
                    $document->newField('id', 'comment_' . $commentdoc->cid);
                    $document->newField('type', 'comments');
                    $document->newField('comments_subject')->newValue(html_entity_decode($resultdoc->subject, ENT_QUOTES, 'UTF-8'), TRUE);
                    $document->newField('comments_comment')->newValue(html_entity_decode($resultdoc->comment, ENT_QUOTES, 'UTF-8'), TRUE);
                    $document->newField('url', $url . $resultdoc->nid . '#comment-' . $commentdoc->cid);
                    $document->newField('timestamp', $commentdoc->timestamp);
                    $document->newField('user_name', $userdetails->name);
                    $document->newField('user_email', $userdetails->mail);
                    $document->newField('user_url', $user_url . $userdetails->uid);
                    opensearchserver_start_indexing($index, $serverDetails, $ossEnginePath, $ossEngineIndex);
                  }
                }
              }
            }
            opensearchserver_start_indexing($index, $serverDetails, $ossEnginePath, $ossEngineIndex);
          }
        }
      }
    }
  }
}

/**
 * Method to start indexing.
 */

function opensearchserver_start_indexing($index, $serverDetails, $ossEnginePath, $ossEngineIndex) {
  $server = new OssApi($ossEnginePath, $ossEngineIndex);
  $server->credential($serverDetails->username, $serverDetails->key);
  if ($server->update($index, $ossEngineIndex) === FALSE) {
    $errors[] = 'failedToUpdate';
  }
  $server->optimize();
}

/**
 * View an search result in opensearchserver.tpl.php
 */

function opensearchserver_view() {
  global $base_url;
  $block_tool = db_query(db_rewrite_sql("SELECT noresult_filter_enable,block_text FROM {opensearchserver}"));
  $block_tool_tip=db_fetch_object($block_tool);
  $arg = arg(NULL, $_GET['q']);
  $result=opensearchserver_get_search_result($arg[2]);
  $opensearchserver_data['paging']=opensearchserver_paging($result);
  $timestamp_array = array("past24" => "Past 24 hours", "pastweek" => "Past week", "pastmonth" => "Past month", "pastyear" => "Past year");
  $opensearchserver_data['q']=$arg[2];
  $opensearchserver_data['result']=$result;
  $opensearchserver_data['base_url']=$base_url;
  $opensearchserver_data['block_text']= $block_tool_tip->block_text;
  $opensearchserver_data['no_filter']= $block_tool_tip->noresult_filter_enable;
  $opensearchserver_data['form']=drupal_get_form('opensearchserver_page_form');
  $opensearchserver_data['time_stamp']=$timestamp_array;
  return theme('opensearchserver_view', $opensearchserver_data);
}

/**
 * Paging for SearchResults.
 */

function opensearchserver_paging($result) {
if ($result != NULL) {
  $ossPaging = new OssPaging($result, 'r', 'p');
  $pagingArray = array();
  if (isset($ossPaging) && $ossPaging->getResultTotal() >= 1) {
    if ($ossPaging->getResultLow() > 0) {
      $style='oss_pager_first';
      $label = 'First';
      $url = $ossPaging->getPageBaseURI() . '1';
      $pagingArray[] = array('style' => $style, 'label' => $label, 'url' => $url);
    }
    if ($ossPaging->getResultPrev() < $ossPaging->getResultCurrentPage()) {
      $style='oss_pager_prev';
      $label = 'Previous';
      $url = $ossPaging->getPageBaseURI() . ($ossPaging->getResultPrev() + 1);
      $pagingArray[] = array('style' => $style, 'label' => $label, 'url' => $url);
    }
    for ($i = $ossPaging->getResultLow(); $i < $ossPaging->getResultHigh(); $i++) {
      $style='oss_pager_number';
      if ($i == $ossPaging->getResultCurrentPage()) {
        $label = $i + 1;
        $url = NULL;
      }
      else {
        $label = $i + 1;
        $url = $ossPaging->getPageBaseURI() . $label;
      }
      $pagingArray[] = array('style' => $style, 'label' => $label, 'url' => $url);
    }
    if ($ossPaging->getResultNext() > $ossPaging->getResultCurrentPage()) {
      $style='oss_pager_next';
      $label = 'Next';
      $url = $ossPaging->getPageBaseURI() . ($ossPaging->getResultNext() + 1);
      $pagingArray[] = array('style' => $style, 'label' => $label, 'url' => $url);
    }
  }
  return $pagingArray;
  }
}

function opensearchserver_create_url_snippet($url, $end) {
  if (drupal_strlen($url)>$end) {
    $snippet_url=substr($url, 0, $end);
    return check_url($snippet_url) . '..';
  }
  else {
    return check_url($url);
  }
}

/**
 * Get the search result from the index.
 */

function opensearchserver_get_search_result($query) {
  if ($query) {
    global $user;
    $getDetails = db_query("
      SELECT * FROM {opensearchserver}"
    );
    $serverDetails = db_fetch_object($getDetails);
    $start = isset($_REQUEST['p']) ? $_REQUEST['p'] : NULL;
    $start = isset($start) ? max(0, $start - 1) * 10 : 0;
    $escapechars = array('\\', '^', '~', ':', '(', ')', '{', '}', '[', ']' , '&&', '||', '!', '*', '?');
    foreach ($escapechars as $escchar) {
      $query = str_replace($escchar, ' ', $query);
    }
    $query = trim($query);
    $search = new OssSearch($serverDetails->serverurl, $serverDetails->indexname, 10, $start);
    $search->credential($serverDetails->username, $serverDetails->key);
    if ($serverDetails->log_enable) {
      $search->setLog(TRUE);
      $search->setCustomLog(1, session_id());
      if ( $user->uid ) {
        $search->setCustomLog (2, $user->name);
      }
      else {
        $search->setCustomLog (2, "Guest");
      }
      $search->setCustomLog (3, $_SERVER['REMOTE_ADDR']);
    }
    $search->facet('type', 1);
    $search->facet('taxonomy', 1);
    $filter=$_REQUEST['fq'];
    if ($filter) {
      if ($filter != 'All') {
        $search->filter('type:"' . $filter . '"');
      }
    }
    $filter_categories=$_REQUEST['tq'];
    if ($filter_categories) {
      if ($filter_categories != 'All') {
        $search->filter('taxonomy:"' . $filter_categories . '"');
      }
    }
    $timestamp_filter=$_REQUEST['ts'];
    if ($timestamp_filter) {
      if ($timestamp_filter != 'All') {
        if ( $timestamp_filter=="Past 24 hours") {
          $search->filter('content_timestamp:[' . date("YmdHis", mktime(0, 0, 0, date("m"), date("d")-1, date("Y"))) . ' TO ' . date("YmdHis") . ']');
        }
        elseif ($timestamp_filter=="Past week") {
          $search->filter('content_timestamp:[' . date("YmdHis", mktime(0, 0, 0, date("m"), date("d")-7, date("Y"))) . ' TO ' . date("YmdHis") . ']');
        }
        elseif ($timestamp_filter=="Past month") {
          $search->filter('content_timestamp:[' . date("YmdHis", mktime(0, 0, 0, date("m"), date("d")-31, date("Y"))) . ' TO ' . date("YmdHis") . ']');
        }
        elseif ($timestamp_filter=="Past year") {
          $search->filter('content_timestamp:[' . date("YmdHis", mktime(0, 0, 0, date("m"), date("d")-365, date("Y"))) . ' TO ' . date("YmdHis") . ']');
        }
      }
    }
    $result = $search->query($query)->template('search')->execute(5);
  }
  return $result;
}

/**
 * Implements drupal search form.
 */

function opensearchserver_page_form() {
  $arg = arg(NULL, $_GET['q']);
  if ($arg[2] != NULL) {
    $value = $arg[2];
  }
  else {
    $value='';
  }
  $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
  $form['basic']['inline']['q'] = array(
  '#type' => 'textfield',
  '#title' => '',
  '#default_value' => $value,
  '#maxlength' => 255,
  );
  $form['basic']['inline']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
  return $form;
}

/**
 * Implements drupal search form submit.
 */

function opensearchserver_page_form_submit($form_id, &$form_state) {
  $form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['q'];
}

function opensearchserver_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    $block = array();
    $block[0]["info"] = t('OpenSearchServer');
    return $block;
  }
  elseif ($op == 'view') {
    $block_content = 'OpenSearchServer';
    $block['subject'] = 'OpenSearchServer';
    $block['content'] = $block_content;
    return $block;
  }
}
