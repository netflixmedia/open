<?php

require 'OSS_API.class.php';
require 'misc.lib.php';
require 'OSS_IndexDocument.class.php';
require 'OSS_Results.class.php';
require 'OSS_Paging.class.php';
require 'OSS_Search.class.php';
require 'OSS_SearchTemplate.class.php';
require 'oss_delete.class.php';

function opensearchserver_perm() {
  return array('access opensearchserver');
}

function opensearchserver_menu() {
  $items = array();
 $items['admin/settings/opensearchserver'] = array(
    'title'              => 'OpenSearchServer',
    'description'        => 'Settings to access the OpenSearchServer instance from drupal.',
    'page callback'      => 'admin_Settings',
    'page arguments'     => array('opensearchserver_settings'),
    'access callback'    => 'user_access',
    'access arguments'   =>  array('access opensearchserver'),
    
  );
   
  $items['opensearchserver'] = array(
    'title' => '',
    'description' => 'This module will integrate OpenSearchServer 1.2 as search engine for Drupal 6.x',
    'page callback' => 'opensearchserver_all',
    'access arguments' => array('access opensearchserver'),
    'type' => MENU_NORMAL_ITEM
  );
  
  return $items;
}
 
function admin_Settings() {
 
 return drupal_get_form('admin_index_form');
 
}
function opensearchserver_preprocess_search_theme_form(&$vars, $hook)
{
	  $vars['form']['search_theme_form']['#value'] = t('Search this Site');

}
function opensearchserver_form_alter(&$form, $form_state, $form_id) {
    $form_id_processed = $form_id;
	$arg = arg(NULL, $_GET['q']);
	if($arg[2]!=null)
	{
		$value=$arg[2];
	}
	else
	{
		$value='';
	}
   switch ($form_id_processed) {

      case 'search_form':
  
				 $form['basic']['inline']['keys'] = array(
				'#type' => 'textfield',
				'#title' => '',
				'#default_value'  => $value,
				'#maxlength' => 255);
				
				$form['basic']['inline']['submit'] = array('#type' => 'submit', '#value' => t('Search'));
				$form['#validate'][] = 'opensearchserver_validate';
				$form['#submit'][] = 'opensearchserver_submit';

				break;
	  case 'search_theme_form':
      
        			 $form['search_theme_form'] = array(
					'#type' => 'textfield',
					'#title' => '',
					'#size' => 15,
					'#maxlength' => 255,
				  );
				    $form['submit'] = array('#type' => 'submit', '#value' => t('Search'));
				  	$form['#submit'][] = 'opensearchserver_submit';
				  break;
		}
   
}
function opensearchserver_validate($form, &$form_state) {

  if (empty($form_state['values']['keys'])) {
    form_set_error('keywords', t('Please enter An Search Term.'));
  }
}
function opensearchserver_submit($form, &$form_state) {

	if($form_state['values']['search_theme_form'])
	{
		$form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['search_theme_form'];
	}
	else
	{
		$form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['keys'];
	}
    
}

function admin_index_form()
{
	 $details = db_query("SELECT * FROM {opensearchserver}");
	 $nodetype = db_query("SELECT DISTINCT* FROM {opensearchserver_type}");
	 $result = db_query("SELECT name,type FROM {node_type}");
    $form['details'] = array(
    '#type' => 'fieldset',
    '#title' => t('Settings'),
	
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
	$sdetails = db_fetch_object($details);
	$form['details']['serverurl'] = array(
     '#type' => 'textfield',
 	 '#title' => t('OpenSearchServer URL'),
	 '#description' => t('No Trailing Slash at last eg:http://example.com:8080 '),
 	 '#default_value' => $sdetails->serverurl,
	 
   );
   $form['details']['indexname'] = array(
     '#type' => 'textfield',
 	 '#title' => t('IndexName '),
	 '#description' => t('Name of the OpenSearchServer Index '),
 	 '#default_value' => $sdetails->indexname,
   );
   $form['details']['username'] = array(
     '#type' => 'textfield',
 	 '#title' => t('UserName'),
	 '#description' => t('The username of OpenSearchServer for authentication '),
 	 '#default_value' => $sdetails->username,
   );
   $form['details']['key'] = array(
     '#type' => 'textfield',
 	 '#title' => t('Key'),
	 '#description' => t('The Key of OpenSearchServer for authentication '),
 	 '#default_value' => $sdetails->key,
   );
   $form['fields'] = array(
    '#type' => 'fieldset',
    '#title' => t('Fields to be Indexed'),
	'#description' => t('Enable the Checkbox before Re-indexing '),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $count = db_result(db_query("SELECT COUNT(*) FROM {opensearchserver_type}"));

  if($count>0)
  {
  
	  while ($types = db_fetch_object($nodetype)) 
		{
		
		 $form['fields'][$types->type] = array(
					 '#type' => 'checkbox',
					 '#title' => t($types->type),
					  '#default_value' => $types->enabled,
				   );
				     
		}
  }
 
  else
  {
    while ($results = db_fetch_object($result)) 
	{
		  
	    $form['fields'][$results->type] = array(
					 '#type' => 'checkbox',
					 '#title' => t($results->type),
					  
				   );
   
   }
   }
     $form['fields']['delay'] = array(
        '#type' => 'select',
        '#title' => 'Select the Indexing interval (in minutes)',
        '#options' => array(
            15 => t('15'),
            30 => t('30'),
            60 => t('60'),        
        ),
		 '#default_value' => $sdetails->delay,
    );
   
  $form['submit'] = array('#type' => 'submit', '#value' => t('Create-index / Save'),'#name'=>'save',);
  $form['StartIndexing'] = array('#type' => 'submit', '#value' => t('Re-index site'),'#name'=>'index');
	return $form;
}
function admin_index_form_validate($form_id, &$form_state)
{
	 if($form_state['clicked_button']['#name']=='save') {
    
		 if (empty($form_state['values']['indexname'])) {
			form_set_error('keywords', t('Please enter the Index Name.'));
		  }
		   if (empty($form_state['values']['serverurl'])) {
			form_set_error('keywords', t('Please enter the Serverurl'));
		  }
		
	}
}
function configure_OSS($url,$indexname,$username,$key)
{
			  $ossAPI = new OSS_API($url);
			  $ossAPI->credential($username,$key);
			  $ossAPI->createIndex($indexname);
		 
	return true;
}
function setFields_OSS($url,$indexname,$username,$key)
{
			  
			  $ossAPI = new OSS_API($url,$indexname);
			  $ossAPI->credential($username,$key);
			  $ossAPI->setField('id','','NO','YES','YES','','NO','YES');
			  $ossAPI->setField('type','','NO','YES','YES','','NO','NO');
			  $ossAPI->setField('url','','NO','YES','YES','','NO','NO');
			  $ossAPI->setField('title','TextAnalyzer','compress','YES','positions_offsets','','NO','NO');
			  $ossAPI->setField('content','TextAnalyzer','compress','YES','positions_offsets','','YES','NO');
			  $ossAPI->setField('timestamp','','NO','YES','YES','','NO','NO');
			  $ossAPI->setField('comments_subject','TextAnalyzer','compress','YES','positions_offsets','','NO','NO');
			  $ossAPI->setField('comments_comment','TextAnalyzer','compress','YES','positions_offsets','','NO','NO');
			  $ossAPI->setField('user_name','TextAnalyzer','compress','YES','positions_offsets','','NO','NO');
			  $ossAPI->setField('user_email','TextAnalyzer','compress','YES','positions_offsets','','NO','NO');
			  $ossAPI->setField('user_url','','NO','YES','YES','','NO','NO');
	  		  $searchTemplate=new OSS_SearchTemplate($url,$indexname);
			  $searchTemplate->credential($username,$key);
			  $searchTemplate->createSearchTemplate("search",'
					title:($$)^10 OR title:("$$")^10
							OR
					content:($$)^10 OR content:("$$")^10
							OR
					user_name:($$)^10 OR user_name:("$$")^10
							OR
					user_email:($$)^10 OR user_email:("$$")^10
							OR
					comments_subject:($$)^10 OR comments_subject:("$$")^10
									OR
					comments_comment:($$)^10 OR comments_comment:("$$")^10
			
			 ',"AND","10","2","ENGLISH");
			 
			  
			   $searchTemplate->setSnippetField("search","title");
			   $searchTemplate->setSnippetField("search","content");
			   $searchTemplate->setReturnField("search","url");
			   $searchTemplate->setReturnField("search","user_url");
			   $searchTemplate->setReturnField("search","type");
			   $searchTemplate->setSnippetField("search","comments_comment");
			   $searchTemplate->setSnippetField("search","comments_subject");
			   $searchTemplate->setSnippetField("search","user_name");
			   $searchTemplate->setSnippetField("search","user_email");
			
}
function populate_db(&$form_state,$serverurl,$indexname,$username, $key)
{
				db_query("TRUNCATE TABLE {opensearchserver}");
				db_query("TRUNCATE TABLE {opensearchserver_type}");
				setFields_OSS($serverurl,$indexname,$username, $key);
				db_query("INSERT INTO `{opensearchserver}` (`serverurl`, `indexname`, `username`, `key`,`last_indexed`,`delay`) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')", $form_state['values']['serverurl'], $form_state['values']['indexname'], $form_state['values']['username'], $form_state['values']['key'],'',$form_state['values']['delay']);
				$types = db_query("SELECT DISTINCT type FROM {node_type}");
				while ($type = db_fetch_object($types)) 
				{
					db_query("INSERT INTO `{opensearchserver_type}` (`type`, `enabled`) VALUES ('%s', '%s')",$type->type,$form_state['values'][$type->type]);
				}
			 
				drupal_set_message(t('The Preferences has been Updated'));
}
function admin_index_form_submit($form_id, &$form_state)
{
 switch ($form_state['clicked_button']['#name']) {
    case 'save':
	
		$indexname=$form_state['values']['indexname'];
		$serverurl=$form_state['values']['serverurl'];
		$username=$form_state['values']['username'];
		$key=$form_state['values']['key'];
		$ossAPI = new OSS_API($serverurl);
		$ossAPI->credential($username,$key);
		
		if(!$ossAPI->isIndexAvailable($indexname))
		{
			configure_OSS($serverurl,$indexname,$username, $key);
		}
		populate_db(&$form_state,$serverurl,$indexname,$username, $key);
		
		break;
	  case 'index':
	   	  get_content_index();
			break;
		
	 }
	 
}
function opensearchserver_cron() {
		$getDetails = db_query("SELECT * FROM {opensearchserver}");
		$serverDetails = db_fetch_object($getDetails);
		$from_time =strtotime(date( 'Y-m-d H:i:s', strtotime($serverDetails->last_indexed)));
		$to_time=strtotime(date('Y-m-d H:i:s', time()));
		$delay=round(abs($to_time - $from_time) / 60);
		if($delay > $serverDetails->delay)
		{
			db_query("UPDATE `{opensearchserver}` SET `last_indexed` = ".date('YmdHis', time())." WHERE `serverurl` = "."'".$serverDetails->serverurl."'");
			get_content_index();
		}
		if(!$serverDetails->last_indexed)
		{
			db_query("UPDATE `{opensearchserver}` SET `last_indexed` = ".date('YmdHis', time())." WHERE `serverurl` = "."'".$serverDetails->serverurl."'");
			get_content_index();
		}
		
					
	
	
}
function get_optimize($url,$username,$password)
{
				$api = new OSS_API($url);
						$api->credential($username,$password);
						$api->optimize();
}
function get_content_index()
{
	
	global $base_url,$url,$user_url;
	global $base_root;
	$path=parse_url($base_root . request_uri());
		$getDetails = db_query("SELECT * FROM {opensearchserver}");
		$serverDetails = db_fetch_object($getDetails);
  		$ossEnginePath  = configRequestValue('ossEnginePath', $serverDetails->serverurl, 'engineURL');
		$ossEngineConnectTimeOut = configRequestValue('ossEngineConnectTimeOut', 5, 'engineConnectTimeOut');
		$ossEngineIndex = configRequestValue('ossEngineIndex', $serverDetails->indexname, 'engineIndex');
	
		$deleteAPI = new oss_delete($serverDetails->serverurl,$serverDetails->indexname);
		$deleteAPI->credential($serverDetails->username,$serverDetails->key);
		$deleteAPI->delete('*:*');
			if($path[query])
			{
				$url=$base_url.'/?q=node/';
				$user_url=$base_url.'/?q=user/';
				 
			}
			else
			{
				$url=$base_url.'/node/';
				$user_url=$base_url.'/user/';
			}
		
		  $types = db_query("SELECT DISTINCT type,enabled FROM {opensearchserver_type}");
		  while ($type = db_fetch_object($types)) 
		  {
			 
			if($type->enabled==1)
			{
				
			$result = db_query('SELECT node.type,node.nid,node.comment,node.status, node_revisions.uid,node_revisions.title,node_revisions.body,node_revisions.timestamp
							FROM {node}, {node_revisions}
							WHERE node.nid = node_revisions.nid AND node.type LIKE'."'".$type->type."'");
						 
		 $index = new OSS_IndexDocument();
			while ($resultdoc = db_fetch_object($result)) 
				{
		
		
					  
					 if($resultdoc->status==1)
					 {
								$getusers = db_query("SELECT name, mail,uid FROM {users} WHERE uid = ".$resultdoc->uid);
								$userdetails = db_fetch_object($getusers);
								$document = $index->newDocument('en');
								$document->newField('id', $resultdoc->type.'_'.$resultdoc->nid);
								$document->newField('type', strip_tags($resultdoc->type));
								$document->newField('title', strip_tags($resultdoc->title));
								$document->newField('content', strip_tags($resultdoc->body));
								$document->newField('url', $url.$resultdoc->nid);
								$document->newField('timestamp', $resultdoc->timestamp);
								$document->newField('user_name',strip_tags($userdetails->name));
								$document->newField('user_email',$userdetails->mail);
								$document->newField('user_url',$user_url.$userdetails->uid);
								$server = new OSS_API($ossEnginePath, $ossEngineIndex);
								$server->credential($serverDetails->username, $serverDetails->key);
							
							if ($server->update($index,$ossEngineIndex) === false) {
								$errors[] = 'failedToUpdate';
							 }
							 	$server->optimize();
							 if($resultdoc->comment > 0)
							 {
									$comments = db_query("SELECT cid, nid,subject,timestamp,comment FROM {comments} WHERE nid = ".$resultdoc->nid);
								  while ($commentdoc = db_fetch_object($comments)) 
									{
									
											$document = $index->newDocument('en');
											$document->newField('id', 'comment_'.$commentdoc->cid);
											$document->newField('type','comments');
											$document->newField('comments_subject', $commentdoc->subject);
											$document->newField('comments_comment', $commentdoc->comment);
											$document->newField('url', $url.$resultdoc->nid.'#comment-'.$commentdoc->cid);
											$document->newField('timestamp', $commentdoc->timestamp);
											$document->newField('user_name',$userdetails->name);
											$document->newField('user_email',$userdetails->mail);
											$document->newField('user_url',$user_url.$userdetails->uid);
											$server = new OSS_API($ossEnginePath, $ossEngineIndex);
											$server->credential($serverDetails->username, $serverDetails->key);
										if ($server->update($index,$ossEngineIndex) === false) {
											$errors[] = 'failedToUpdate';
										 }
										 $server->optimize();
								 }
							 }
				 
						}
						}
				
							
		 }
		 }
						
}

function opensearchserver_all() {
	$arg = arg(NULL, $_GET['q']);
	$result=getSearchResult($arg[2],$arg[3]);
	$cont=drupal_get_form('opensearchserver_page_form');
  
  		if (isset($result) && $result instanceof SimpleXMLElement) {
		$ossResults = new OSS_Results($result);
			if($ossResults->getResultFound()>0)
		{
		$resultTime = (float)$result->result['time'] / 1000;
			 
		$cont.='<div align="left">'.$ossResults->getResultFound().' documents found ('.$resultTime.' seconds)'.'</div>';
		  
		$max = ($ossResults->getResultStart() + $ossResults->getResultRows() > $ossResults->getResultFound()) ? $ossResults->getResultFound() : $ossResults->getResultStart() + $ossResults->getResultRows();
		$cont .='<table border="0" style="border:none">
    <tr>
         <td height="70" width="130">
            <div>
			';
			$cont.='<br/>';
				$cont.='<p>'.'<a href=?q=opensearchserver/search/'.$arg[2].'/&fq=All>ALL</a>'.'</p><br/>';
				foreach ($ossResults->getFacet('type') as $values)
				{
					$value = $values['name'];
					$cont.='<p>'.'<a href=?q=opensearchserver/search/'.$arg[2].'/&fq='.$value.'>'.ucfirst($value).'('.$values.')'.'</a>'.'</p><br/>';
					
				}	
						
	$cont .=' </div>        </td>
        <td rowspan="2">
            <div>';
	$cont.='<br/>';
		for ($i = $ossResults->getResultStart(); $i < $max; $i++) {
			$category	 = stripslashes($ossResults->getField($i, 'type', true));
			 
			if($category=="comments")
			{
				$subject = stripslashes($ossResults->getField($i, 'comments_subject', true));
				$comment = stripslashes($ossResults->getField($i, 'comments_comment', true));
				$user = stripslashes($ossResults->getField($i, 'user_name', true));
				$user_url = stripslashes($ossResults->getField($i, 'user_url', true));
				$type = stripslashes($ossResults->getField($i, 'type', true));
				$url = stripslashes($ossResults->getField($i, 'url', false));
				$cont.='<a href="'.$url.'">'.$subject.'</a><br/>';
				$cont.=$comment.'<br/>';
				$cont.='<a href='.$url.'>'.$url.'</a>&nbsp;&nbsp;&nbsp;&nbsp;'.$type.' by <a href='.$user_url.'>'.$user.'</a><br/><br/>';
				
			}
			else
			{
				$title	 = stripslashes($ossResults->getField($i, 'title', true));
				$content = stripslashes($ossResults->getField($i, 'content', true));
				$user = stripslashes($ossResults->getField($i, 'user_name', true));
				$user_url = stripslashes($ossResults->getField($i, 'user_url', true));
				$type = stripslashes($ossResults->getField($i, 'type', true));
				$url = stripslashes($ossResults->getField($i, 'url', false));
				$cont.='<a href="'.$url.'">'.$title.'</a><br/>';
				$cont.=$content.'<br/>';
				$cont.='<a href='.$url.'>'.$url.'</a>&nbsp;&nbsp;&nbsp;&nbsp;'.$type.' by <a href='.$user_url.'>'.$user.'</a><br/><br/>';
				$cont.='</p>';
			}
			
		
		}
			$cont.='<div align="right">';
			$cont.='<img src="http://www.open-search-server.com/images/oss_logo_62x60.png" /><br/>';
			$cont.='<a href="http://www.open-search-server.com/">Enterprise Search Made Yours</a>';
			$cont.='</div>';
			$ossPaging = new OSS_Paging($result, 'r', 'p');
			$pagingArray = array();
			if (isset($ossPaging) && $ossPaging->getResultTotal() >= 1) {
			
			   if ($ossPaging->getResultLow() > 0) {
				$label = 'First';
				$url = $ossPaging->getPageBaseURI().'1';
				$pagingArray[] = array('label' => $label, 'url' => $url);
			   }
			   if ($ossPaging->getResultPrev() < $ossPaging->getResultCurrentPage()) {
				$label = 'Previous';
				$url = $ossPaging->getPageBaseURI().($ossPaging->getResultPrev() + 1);
				$pagingArray[] = array('label' => $label, 'url' => $url);
			   }
			   for ($i = $ossPaging->getResultLow(); $i < $ossPaging->getResultHigh(); $i++) {
				if ($i == $ossPaging->getResultCurrentPage()) {
				 $label = $i + 1;
				 $url = null;
				} else {
				 $label = $i + 1;
				 $url = $ossPaging->getPageBaseURI().$label;
				 }
				$pagingArray[] = array('label' => $label, 'url' => $url);
				
			   }
			   if ($ossPaging->getResultNext() > $ossPaging->getResultCurrentPage()) {
				$label = 'Next';
				$url = $ossPaging->getPageBaseURI().($ossPaging->getResultNext() + 1);
				$pagingArray[] = array('label' => $label, 'url' => $url);

			   }
			  }
			  
			  foreach($pagingArray as $page)
			  {
				$cont.='<a href='.$page['url'].'>'.$page['label'].'</a>'.'&nbsp;&nbsp;&nbsp;';
			  }
		}
		}
		else
		{
		$cont.="No result found for keyword".$arg[2] ;
		}
		
        
           $cont.='
               </div>      </td>
    </tr>
    <tr>
      <td>&nbsp;</td>
    </tr>
</table>';
	 
		
 return $cont;
 unset($cont);
}
 
 function getSearchResult($query)
 {
	 if($query)
	 {
			$getDetails = db_query("SELECT * FROM {opensearchserver}");
			$serverDetails = db_fetch_object($getDetails);
			$start = isset($_REQUEST['p']) ? $_REQUEST['p'] : null;
			$start = isset($start) ? max(0, $start - 1) * 10 : 0;
			$escapechars = array('\\', '^', '~', ':', '(', ')', '{', '}', '[', ']' , '&&', '||', '!', '*', '?');
			foreach ($escapechars as $escchar) $query = str_replace($escchar, ' ', $query);
			$query = trim($query);
			$search = new OSS_Search($serverDetails->serverurl, $serverDetails->indexname, 10, $start);
			$search->credential($serverDetails->username, $serverDetails->key);
			$search->facet('type',1);
			$filter=$_REQUEST['fq'];
			if($filter)
			{
				if($filter!='All')
				{
					$search->filter('type:'.$filter);
				}
			}			 
			$result = $search->query($query)->template('search')->execute(5);
			
		
	}
	return $result;
 }
function opensearchserver_page_form() {
  $arg = arg(NULL, $_GET['q']);
	if($arg[2]!=null)
	{
		$value=$arg[2];
	}
	else
	{
		$value='';
	}
   $form['basic']['inline'] = array('#prefix' => '<div class="container-inline">', '#suffix' => '</div>');
   $form['basic']['inline']['q'] = array(
    '#type' => 'textfield',
    '#title' => '',
	'#default_value'=>$value,
    '#maxlength' => 255,  
	 
  );

  $form['basic']['inline']['submit'] = array('#type' => 'submit', '#value' => t('Search'));

  return $form;
}

function opensearchserver_page_form_submit($form_id, &$form_state) {
 
	 
   $form_state['redirect'] = 'opensearchserver/search/'. $form_state['values']['q'];
  
}
 
function opensearchserver_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == "list") {
    $block = array();
    $block[0]["info"] = t('OpenSearchServer');
    return $block;
  }
  elseif ($op == 'view') {
    $block_content = 'OpenSearchServer';
    $block['subject'] = 'OpenSearchServer';
    $block['content'] = $block_content;
    return $block;
  }
}
